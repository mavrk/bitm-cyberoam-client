package news;

//import com.alee.laf.WebLookAndFeel;
import com.notification.NotificationFactory;
import com.notification.NotificationFactory.Location;
import com.notification.NotificationManager;
import com.notification.manager.SimpleManager;
import com.notification.types.IconNotification;
import com.theme.ThemePackagePresets;
import com.utils.IconUtils;
import com.utils.Time;
import de.javasoft.plaf.synthetica.SyntheticaAluOxideLookAndFeel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowStateListener;
import java.io.*;
import java.io.IOException;
import java.net.*;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.X509Certificate;
import java.text.ParseException;
import java.util.Scanner;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import javax.swing.JOptionPane;
import javax.swing.UnsupportedLookAndFeelException;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import org.xml.sax.SAXException;

 /*
 * @author Sanatt Abrol
 */
public class Form_Main extends javax.swing.JFrame {

    /**
     * Creates new form Form_Main
     */
  private static final String POST_CONTENT_TYPE = "application/x-www-form-urlencoded";
	    //private static final String LOGIN_USER_NAME_PARAMETER_NAME = "username";
	    //private static final String LOGIN_PASSWORD_PARAMETER_NAME = "password";
 
	    private static int COUNTER = 0;
            private static int COUNTER_0 = 0;
	    private static final String TARGET_URL = "https://172.16.1.1:8090/login.xml";
            private static final String TARGET_URL_0 = "https://172.16.1.1:8090/logout.xml";
            private static String[] VALUES = {};
            static Timer timer = new Timer();
    static int seconds = 0;
      
    public Form_Main() {
        initComponents();
        this.setLocationRelativeTo(null);
        stop.setEnabled(false);
        try{
            ReadFromXML();
        }
        catch(Exception e){
            e.printStackTrace();
        }
        
        //Event listener for Close
        this.setDefaultCloseOperation(Form_Main.DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new WindowAdapter() {
        @Override
            public void windowClosing(WindowEvent event) {
               
                try{
                    exitProcedure();
                }
                    catch(Exception e){e.printStackTrace();}// 
            }
        });
        
        //Event listener for Minimise
        this.addWindowStateListener(new WindowStateListener(){
        @Override
            public void windowStateChanged(WindowEvent e) {
                        if ((e.getNewState() & Frame.ICONIFIED) == Frame.ICONIFIED){
                                MinimiseToSystemTray(1);
                                setFrameVisible(false);    
                        }    
                   }
        
        });
        
        
        
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jUsr = new javax.swing.JTextField();
        create = new javax.swing.JButton();
        stop = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jUsr1 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jPsw1 = new javax.swing.JPasswordField();
        jPsw = new javax.swing.JPasswordField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jCheckBox5 = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Crap-WH");
        setBackground(new java.awt.Color(21, 21, 21));
        setForeground(new java.awt.Color(21, 21, 21));
        setResizable(false);

        create.setText("Start Wifi");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });

        stop.setText("Stop Wifi");
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        jButton1.setText("Authenticate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Show Password");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox4.setText("Show Password");
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/1447781090_ic_wifi_lock_48px.png"))); // NOI18N

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cyberoam.png"))); // NOI18N

        jLabel1.setText("SSID");

        jLabel4.setText("Password");

        jLabel5.setText("Username");

        jLabel6.setText("Password");

        jCheckBox5.setText("Authenticate on App Startup");
        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/news/information.png"))); // NOI18N
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });

        jLabel16.setText("Crap-WH made by Sanatt Abrol.");

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/news/information.png"))); // NOI18N
        jLabel17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel17MouseClicked(evt);
            }
        });

        jLabel19.setText("See hotspot info");
        jLabel19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel19MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jUsr)
                                .addComponent(jPsw, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(stop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(create, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(150, 150, 150)
                                .addComponent(jLabel17))
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(2, 2, 2)
                        .addComponent(jLabel19)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPsw1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel3))
                    .addComponent(jLabel5)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jUsr1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton1))
                    .addComponent(jCheckBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox4))
                .addContainerGap(41, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(215, 215, 215)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jUsr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(create))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPsw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stop))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel19)
                            .addComponent(jLabel17))
                        .addGap(77, 77, 77))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jUsr1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6))
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPsw1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel16))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void setFrameVisible(boolean param)
    {
            this.setVisible(param);
    }
    private void RestoreWindow()
    {
        this.setExtendedState(NORMAL);
        this.setVisible(true);
        //this.setExtendedState(MAXIMIZED_BOTH);
        this.setLocationRelativeTo(null);
    }
    private void MinimiseToSystemTray(int val)
    {
        if(SystemTray.isSupported())
        {
            SystemTray systemTray = SystemTray.getSystemTray();
            //Image of system tray icon
            Image image = Toolkit.getDefaultToolkit().getImage(this.getClass().getResource("/poop.gif"));
            //popupmenu
            PopupMenu trayPopupMenu = new PopupMenu();
            //tray icon
            TrayIcon trayIcon = new TrayIcon(image, "Crap-WH", trayPopupMenu);
            //adjust to default size as per system recommendation 
            trayIcon.setImageAutoSize(true);

            
            //3rd menuitem of popupmenu
            MenuItem auth = new MenuItem(jButton1.getText());
            auth.addActionListener(new ActionListener() {
            @Override
                public void actionPerformed(ActionEvent e) {
                    jButton1.doClick();
                    MinimiseToSystemTray(1);
                    systemTray.remove(trayIcon);
                }
            });
            trayPopupMenu.add(auth);
            
            //Hotspot state
            String hotspotState;
            if(create.isEnabled())
                hotspotState="Start Hotspot";
            else
                hotspotState="Stop Hotspot";
            
            //4th menuitem of popupmenu
            MenuItem hotspot = new MenuItem(hotspotState);
            hotspot.addActionListener(new ActionListener() {
            @Override
                public void actionPerformed(ActionEvent e) {
                    if(create.isEnabled())
                        create.doClick();
                    else if(stop.isEnabled())
                        stop.doClick();
                    MinimiseToSystemTray(1);
                    systemTray.remove(trayIcon);
                
                }
            });
            trayPopupMenu.add(hotspot);
            
            //1st menuitem for popupmenu
            MenuItem maximise = new MenuItem("Restore");
            maximise.addActionListener(new ActionListener() {
            @Override
                public void actionPerformed(ActionEvent e) {
                    //JOptionPane.showMessageDialog(null, "Action Clicked");
                    RestoreWindow();
                    systemTray.remove(trayIcon);
                }
            });     
            trayPopupMenu.add(maximise);

            //2nd menuitem of popupmenu
            MenuItem close = new MenuItem("Close");
            close.addActionListener(new ActionListener() {
            @Override
                public void actionPerformed(ActionEvent e) {
                    System.exit(0);             
                }
            });
            trayPopupMenu.add(close);

            //setting tray icon
            
            try{
                systemTray.add(trayIcon);
                if(val==0)
                    systemTray.remove(trayIcon);
            }catch(AWTException awtException){
                awtException.printStackTrace();
            }
            //System.out.println("end of main");

        //end of if            
        }
    }
    private void exitProcedure() throws ParserConfigurationException, SAXException, IOException, URISyntaxException, TransformerException
    {
        ModifyXML();
        this.dispose();
        System.exit(0);
    }
    private void ReadFromXML() throws URISyntaxException, ParserConfigurationException, SAXException, IOException, TransformerException
    {
        FileHandle fl = new FileHandle();
        XMLClass xm = new XMLClass();
        //Checking of file exists
        if(!fl.CheckForFileInParentDirectory("settings","config.xml"))
            xm.createNewXML();
        
        //Reading the XML file
        String[] values = xm.ReadXML();
        jUsr.setText(values[0]);
        jPsw.setText(values[1]);
        jUsr1.setText(values[2]);
        jPsw1.setText(values[3]);
        if(values[4].equalsIgnoreCase("0"))
            jCheckBox5.setSelected(false);
        else
            jCheckBox5.setSelected(true);
        if(values[4].equalsIgnoreCase("1"))
            jButton1.doClick();
    }
    private void ModifyXML() throws ParserConfigurationException, SAXException, IOException, URISyntaxException, TransformerException
    {
        //generating the array
        String autoAuth;
        if(jCheckBox5.isSelected())
            autoAuth = "1";
        else
            autoAuth = "0";
        String[] values = {jUsr.getText(), jPsw.getText(), jUsr1.getText(), jPsw1.getText(), autoAuth};
        
        //writing array to XML file
        XMLClass xm = new XMLClass();
        xm.ModifyXML(values);
    }
    private String readResponse(HttpURLConnection urlConnection) throws IOException
    {
 
        BufferedReader bufferedReader = null;
        try
        {
            // Prepare a reader to read the response from the URLConnection
            // throws IOException
            bufferedReader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            String responeLine;
 
            StringBuilder response = new StringBuilder();
 
           
            // Read until there is nothing left in the stream
            // throws IOException
            while ((responeLine = bufferedReader.readLine()) != null)
            {
                response.append(responeLine);
            }
           
 
            return response.toString();
        }
        catch(IOException ioException)
        {
            System.out.println("Problems while reading the response");
            ioException.printStackTrace();
 
            // throw the exception so that the caller is aware that
            // there was some problems
            throw ioException;
 
        }
        finally
        {
            // to free up any resources if possible
            if (bufferedReader != null)
            {
                try
                {
                    // throws IOException
                    bufferedReader.close();
                }
                catch(Throwable ignore)
                {
                    // Cannot do much with exceptions doing clean up
                    // Ignoring all exceptions
                }
            }
 
        }
    }
    
    
    public void Cyberoam(int x,String u, String p) throws NoSuchAlgorithmException, KeyManagementException, InterruptedException
    {
         //NoCheck();
        httpPostLogin(x,u,p);
    
    }
    
    public void httpPostLogin (int x,String u,String p) throws InterruptedException
    {
        try
        {
            // Prepare the content to be written
            // throws UnsupportedEncodingException
            String urlEncodedContent = preparePostContent(x,u, p);
 
            System.out.println(urlEncodedContent);
            
            HttpURLConnection urlConnection = doHttpPost(x,TARGET_URL, urlEncodedContent);
                System.out.println('\n' + " Step 1");
            String response = readResponse(urlConnection);
            char a = response.charAt(119);
            if(x==0)
                a=response.charAt(120);
            System.out.println("Successfully made the HTPP POST.");
            System.out.println("Recevied response is: '/n" + response + "'");
            
            if(response.contains("You have reached Maximum Login Limit."))
                JOptionPane.showMessageDialog(null, "You have reached Maximum Login Limit");
            else if(a=='o')
                PostFail();
            else if(response.contains("The system could not log you on. Make sure your password is correct"))
               JOptionPane.showMessageDialog(null,"The system could not log you on. Make sure your password is correct"); 
            else if(a=='i')
                PostSuccess();
            else 
                JOptionPane.showMessageDialog(null,response);
             
        }
        catch(IOException ioException)
        {
            System.out.println("Problems encounterd.");
        }
    }
 
    private String preparePostContent(int x,String loginUserName, String loginPassword) throws UnsupportedEncodingException
    {
        // Encode the user name and password to UTF-8 encoding standard
        // throws UnsupportedEncodingException
        String encodedLoginUserName = URLEncoder.encode(loginUserName, "UTF-8");
        String encodedLoginPassword = URLEncoder.encode(loginPassword, "UTF-8");
        int mode;
        if(x==1)
            mode=191; //to log in
        else
            mode=193;//to log out
        long a = System.currentTimeMillis();
        String content = "mode="+mode+"&username="+encodedLoginUserName+"&password="+encodedLoginPassword+"&a="+a+"&producttype=0";
 
        return content;
    
    }
    public HttpURLConnection doHttpPost(int x,String targetUrl, String content) throws IOException
    {
        HttpURLConnection urlConnection = null;
        DataOutputStream dataOutputStream = null;
        try
        {
            // Open a connection to the target URL
            // throws IOException
            if(x==0)
                targetUrl=TARGET_URL_0;
            urlConnection = (HttpURLConnection)(new URL(targetUrl).openConnection());
 
            // Specifying that we intend to use this connection for input
            urlConnection.setDoInput(true);
           // urlConnection = (HttpURLConnection) configureConnection(urlConnection);
            // Specifying that we intend to use this connection for output
            urlConnection.setDoOutput(true);
 
            // Specifying the content type of our post
            urlConnection.setRequestProperty("Content-Type", POST_CONTENT_TYPE);
            urlConnection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2.8) Gecko/20100722 Firefox/3.6.8");
 
            HttpURLConnection.setFollowRedirects(true);
            // Specifying the method of HTTP request which is POST
            // throws ProtocolException
            urlConnection.setRequestMethod("POST");
            // Prepare an output stream for writing data to the HTTP connection
            // throws IOException
            dataOutputStream = new DataOutputStream(urlConnection.getOutputStream());
 
            // throws IOException
            dataOutputStream.writeBytes(content);
            dataOutputStream.flush();
            dataOutputStream.close();
                System.out.println('\n' + " Step 2");
 
            return urlConnection;
        }
        catch(IOException ioException)
        {
            System.out.println("I/O problems while trying to do a HTTP post.");
            ioException.printStackTrace();
 
            // to free up any resources if possible
            if (dataOutputStream != null)
            {
                try
                {
                    dataOutputStream.close();
                }
                catch(Throwable ignore)
                {
                    // Cannot do anything about problems while
                    // trying to clean up. Just ignore
                }
            }
            if (urlConnection != null)
            {
                urlConnection.disconnect();
            }
 
            // throw the exception so that the caller is aware that
            // there was some problems
            throw ioException;
        }
    }
    
     public void NoCheck() throws NoSuchAlgorithmException, KeyManagementException
    {
            TrustManager[] trustAllCerts = new TrustManager[] {
       new X509TrustManager() {
          public java.security.cert.X509Certificate[] getAcceptedIssuers() {
            return null;
          }

          public void checkClientTrusted(X509Certificate[] certs, String authType) {  }

          public void checkServerTrusted(X509Certificate[] certs, String authType) {  }

       }
    };

    SSLContext sc = SSLContext.getInstance("SSL");
    sc.init(null, trustAllCerts, new java.security.SecureRandom());
    HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

    // Create all-trusting host name verifier
    HostnameVerifier allHostsValid = new HostnameVerifier() {
        public boolean verify(String hostname, SSLSession session) {
          return true;
        }
    };
    // Install the all-trusting host verifier
    HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
    /*
     * end of the fix
     */
    
        
        }
    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
        // TODO add your handling code here:
        String usr=jUsr.getText();
        
        String psw=jPsw.getText();
        stop.setEnabled(true);
        create.setEnabled(false);
        CreateWifi(usr,psw);
        WifiStart();
      
    }//GEN-LAST:event_createActionPerformed

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
create.setEnabled(true);
WifiStop();
stop.setEnabled(false);
// TODO add your handling code here:
    }//GEN-LAST:event_stopActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
            if(Ping("172.16.1.1"))
            {
                NoCheck();
                 int x=0;
                 x=COUNTER-COUNTER_0;
                if(x==0)
                    x=1;
                else if(x==1)
                    x=0;
                Cyberoam(x,jUsr1.getText(),jPsw1.getText());
                
                //MyTimer();
            }
            else
                JOptionPane.showMessageDialog(null,"Can't connect to Cyberoam Server");
                    }
catch(Exception e)
{}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
    // TODO add your handling code here:
if(jCheckBox4.isSelected()==true)
{
    JOptionPane.showMessageDialog(null,"pass is "+jPsw1.getText());
    jCheckBox4.setSelected(false);
}
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
if(jCheckBox1.isSelected()==true)
{
    JOptionPane.showMessageDialog(null,"pass is "+jPsw.getText());
    jCheckBox1.setSelected(false);
}        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed

// TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
JOptionPane.showMessageDialog(null,"Crap-WH \n made by Sanatt Abrol BE/10489/15 \n using NetBeasn IDE 8.0");        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel7MouseClicked

    private void jLabel17MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel17MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel17MouseClicked

    private void jLabel19MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel19MouseClicked
try{
  Process p=Runtime.getRuntime().exec("cmd /c netsh wlan show hostednetwork"); 
             
          BufferedReader reader=new BufferedReader(new InputStreamReader(p.getInputStream()));
          String s,a="";  
          while((s=reader.readLine())!=null)
          {
              a+=s+'\n';
          }
          JOptionPane.showMessageDialog(null, a);
          
}
catch(HeadlessException | IOException e){
    
    }// TODO add your handling code here:
    }//GEN-LAST:event_jLabel19MouseClicked
    
    private void PostSuccess()
    {
    
        COUNTER++;
jButton1.setText("De-Authenticate");

    NotificationFactory factory = new NotificationFactory(ThemePackagePresets.cleanDark());
    NotificationManager man = new SimpleManager(Location.SOUTHEAST);
    IconNotification note = factory.buildIconNotification("Logged In", "User "+jUsr1.getText()+" has logged in", 
IconUtils.createIcon("/news/exclamation.png", 40, 40));
    note.setCloseOnClick(true);
    man.addNotification(note, Time.seconds(4));
    //MyTimer();
    }
                
    private void PostFail() throws InterruptedException
    {
        
    NotificationFactory factory = new NotificationFactory(ThemePackagePresets.cleanDark());
    NotificationManager man = new SimpleManager(Location.SOUTHEAST);
    IconNotification note = factory.buildIconNotification("Logged Out", "User "+jUsr1.getText()+" has logged out", 
IconUtils.createIcon("/news/exclamation.png", 40, 40));
    note.setCloseOnClick(true);
    man.addNotification(note, Time.seconds(4));
COUNTER_0++;
jButton1.setText("Authenticate");    
    }
    
   
   
 /*  public void MyTimer() {

        TimerTask task;

        task = new TimerTask() {
            @Override
            public void run() { 
                seconds++;
                if(seconds %10==0)
                {
                    if(Ping("google.com")==false)
                    {
                        jButton1.doClick();
                        try {
                            Thread.sleep(500);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Form_Main.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        jButton1.doClick();
                    }
                }
            }
        };
      timer.schedule(task, 0, 1000); 
               

    }
   */
   public boolean Ping(String addr){
       //To ping a particular server
       try {
			Process p = Runtime.getRuntime().exec("ping "+addr);
			BufferedReader inputStream = new BufferedReader(
					new InputStreamReader(p.getInputStream()));
                        int flag = 0;
			String s = "";
			// reading output stream of the command
			while ((s = inputStream.readLine()) != null) {
				System.out.println(s);
                                if(s.contains("Reply from"))
                                //             flag = 1;
                                {
                                    flag = 1;
                                    p.destroy();
                                }
                        }
                if(flag == 1)
                    return true;
                else
                    return false;
                        
		} catch (Exception e) {
			e.printStackTrace();
                        return false;
                }
    
     
      
   }
    public void WifiStop(){
            try 
{ 
Process p=Runtime.getRuntime().exec("cmd /c netsh wlan stop hostednetwork"); 
p.waitFor(); 
BufferedReader reader=new BufferedReader(new InputStreamReader(p.getInputStream())); 
String line=reader.readLine(); 
while(line!=null) 
{ 
System.out.println(line);
if(line.equalsIgnoreCase("The hosted network stopped. "))
{
NotificationFactory factory = new NotificationFactory(ThemePackagePresets.cleanDark());
            NotificationManager man = new SimpleManager(Location.SOUTHEAST);
            
            IconNotification note = factory.buildIconNotification("Hotspot OFF", jUsr.getText()+" is stopped", 
            IconUtils.createIcon("/news/exclamation.png", 40, 40));
            note.setCloseOnClick(true);
            man.addNotification(note, Time.seconds(4));

    

}
//jTextArea1.append('\n'+line);
line=reader.readLine(); 
} 
    p.destroy();
} 
catch(IOException e1) {
    stop.setEnabled(true);
JOptionPane.showMessageDialog(null,"Sorry! Can not configure this interface");
} 
catch(InterruptedException e2) {
    stop.setEnabled(true);
JOptionPane.showMessageDialog(null,"Sorry! Can not configure this interface");
}
    }
    public void CreateWifi(String usr,String psw){
           try 
{ 
Process p=Runtime.getRuntime().exec("cmd /c netsh wlan set hostednetwork mode=allow ssid="+usr+" key="+psw); 
p.waitFor(); 
BufferedReader reader=new BufferedReader(new InputStreamReader(p.getInputStream())); 
String line=reader.readLine();

//jTextArea1.append('\n'+line);
while(line!=null) 
{
    if(line.equalsIgnoreCase("The hosted network couldn't be started."))
        {
                  JOptionPane.showMessageDialog(null,"Sorry! Can not configure this interface. WiFi device is switched off. Check log for further clarification.");
                  create.setEnabled(true);
        
        } 
System.out.println(line);
//jTextArea1.append(line);
line=reader.readLine(); 
} 
    p.destroy();
} 
catch(IOException e1) {
JOptionPane.showMessageDialog(null,"Sorry! Can not configure this interface");
stop.setEnabled(false);
} 
catch(InterruptedException e2) {
stop.setEnabled(false);    
JOptionPane.showMessageDialog(null,"Sorry! Can not configure this interface");} 

       }
 public void WifiStart(){
            try 
{ 
Process p=Runtime.getRuntime().exec("cmd /c netsh wlan start hostednetwork"); 
p.waitFor(); 
BufferedReader reader=new BufferedReader(new InputStreamReader(p.getInputStream())); 
String line=reader.readLine(); 
while(line!=null) 
{ 
System.out.println(line);
        if(line.equalsIgnoreCase("The wireless local area network interface is powered down and doesn't support the requested operation.")==true)
        {
                  JOptionPane.showMessageDialog(null,"Sorry! Can not configure this interface. WiFi device is switched off. Check log for further clarification.");
                  create.setEnabled(true);
                  stop.setEnabled(false);
        
        }
        else if(line.equalsIgnoreCase("The hosted network started. "))
        {
            NotificationFactory factory = new NotificationFactory(ThemePackagePresets.cleanDark());
            NotificationManager man = new SimpleManager(Location.SOUTHEAST);
            IconNotification note = factory.buildIconNotification("Hotspot ON", jUsr.getText()+" is created", 
            IconUtils.createIcon("/news/exclamation.png", 40, 40));
            note.setCloseOnClick(true);
            man.addNotification(note, Time.seconds(4));

        
        }
        else if(line.equals("")){}
        else{
            JOptionPane.showMessageDialog(null,"You need to run this with admin priveleges. Run 'run_32.bat' for 32-bit windows or 'run_64.bat' for 64 bit windows");
        
        
        }
//jTextArea1.append('\n'+line);
line=reader.readLine(); 
} 
    p.destroy();
} 
catch(IOException e1) {
    stop.setEnabled(false);
JOptionPane.showMessageDialog(null,"Sorry! Can not configure this interface");
} 
catch(InterruptedException e2) {
    stop.setEnabled(false);
JOptionPane.showMessageDialog(null,"Sorry! Can not configure this interface");
} 

            
 
 
 }   
 
 /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws ParseException, UnsupportedLookAndFeelException {
   
          /* Set the Nimbus look and feel */
          //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
          /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
          * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
          /*
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                  // this.getContentPane().setBackground( Color.red );
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
       
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Form_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Form_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Form_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Form_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
          //</editor-fold>
          
          /* Create and display the form */
        javax.swing.UIManager.setLookAndFeel(new SyntheticaAluOxideLookAndFeel());  
        Form_Main fm = new Form_Main();
           java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try{
                        Thread.sleep(0361);
                        //javax.swing.UIManager.setLookAndFeel(new SyntheticaAluOxideLookAndFeel());
                }
                catch(Exception e)
                {}
                //Form_Main.CENTER_ALIGNMENT;
                
                //new Form_Main().setVisible(true);
                fm.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton create;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPasswordField jPsw;
    private javax.swing.JPasswordField jPsw1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jUsr;
    private javax.swing.JTextField jUsr1;
    private javax.swing.JButton stop;
    // End of variables declaration//GEN-END:variables
}
